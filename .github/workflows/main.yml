name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  ci:
    name: CI - Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test

      - name: Log CI failure
        if: failure()
        run: |
          echo "$(date +'%Y-%m-%d %H:%M:%S') - CI failed for repository ${{ github.repository }}" >> ci_cd_failures.log

  cd:
    name: CD - Deploy Application
    runs-on: ubuntu-latest
    needs: ci  # This makes sure CD will only run if CI passes

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          GIT_COMMIT_HASH=$(git rev-parse --short HEAD)
          docker build --build-arg COMMIT_HASH=$GIT_COMMIT_HASH -t ${{ secrets.DOCKER_USERNAME }}/myapp:$GIT_COMMIT_HASH .
          docker tag ${{ secrets.DOCKER_USERNAME }}/myapp:$GIT_COMMIT_HASH ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:$GIT_COMMIT_HASH
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

      - name: Log CD failure
        if: failure()
        run: |
          echo "$(date +'%Y-%m-%d %H:%M:%S') - CD failed for repository ${{ github.repository }}" >> ci_cd_failures.log
